from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from app.agents.rss_aggregator import fetch_rss_articles

import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π AI Content Assistant! üöÄ\n–ù–∞–ø–∏—à–∏ /top_news –∞–±–æ /custom_topic")


async def top_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç Fetching top news for you...")

    articles = fetch_rss_articles(max_articles=3)

    if not articles:
        await update.message.reply_text("üòî Sorry, no news found.")
        return

    batch_message = ""
    batch_size = 5

    for idx, article in enumerate(articles, start=1):
        batch_message += f"üì∞ *{article['title']}*\n[Read more]({article['link']})\n\n"

        if idx % batch_size == 0 or idx == len(articles):
            await update.message.reply_text(batch_message.strip(), parse_mode="Markdown")
            batch_message = ""

async def custom_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–º—É, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:")


async def topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìö –û—Å—å —Ç–≤–æ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç–µ–º–∏ (–ø–æ–∫–∏ —â–µ –ø–æ—Ä–æ–∂–Ω—å–æ)")


def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top_news", top_news))
    app.add_handler(CommandHandler("custom_topic", custom_topic))
    app.add_handler(CommandHandler("topics", topics))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ß–µ–∫–∞—é –∫–æ–º–∞–Ω–¥–∏...")

    app.run_polling()